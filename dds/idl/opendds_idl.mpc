project: aceexe, opendds_idl_plugin, crosscompile, install {
  exename = *
  exeout  = $(DDS_ROOT)/bin

  verbatim(gnuace, local) {
    ifeq ($(TAO_IDL_PREPROCESSOR),)
      ifeq ($(ACE_CC_PREPROCESSOR),)
        CPPFLAGS += -DTAO_IDL_PREPROCESSOR=\\\"$(strip $(CXX))\\\"
      else
        CPPFLAGS += -DACE_CC_PREPROCESSOR=\\\"$(ACE_CC_PREPROCESSOR)\\\"
      endif
    else
      CPPFLAGS += -DTAO_IDL_PREPROCESSOR=\\\"$(TAO_IDL_PREPROCESSOR)\\\"
    endif
    idl_stubs: all
  }

  Documentation_Files {
  }

  InstallData_Files {
    gendir = dds/idl
    *Template.txt
  }

  specific {
    install_dir = dds
  }

  verbatim(gnuace, postinstall) {
"	@$(MKDIR) $(DESTDIR)$(INSTALL_PREFIX)/share/dds/bin"
"	ln -sf ../../../bin/opendds_idl $(DESTDIR)$(INSTALL_PREFIX)/share/dds/bin"
  }

  Source_Files {
    drv_args.cpp
    drv_preproc.cpp
    opendds_idl.cpp
  }
}

project(opendds_idl_plugin): acelib, dds_macros, crosscompile, opendds_util {
  sharedname   = opendds_idl_plugin
  libout       = $(DDS_ROOT)/lib
  dynamicflags = OPENDDS_IDL_PLUGIN_BUILD_DLL
  after       += TAO_IDL_FE
  libs        += TAO_IDL_FE
  includes    += . $(TAO_ROOT)/TAO_IDL/include $(TAO_ROOT)
  requires    += no_opendds_safety_profile

  Source_Files {
    annotations.cpp
    be_builtin.cpp
    be_builtin_global.cpp
    be_global.cpp
    be_init.cpp
    be_produce.cpp
    be_util.cpp
    cxx11_language_mapping.cpp
    dds_generator.cpp
    dds_visitor.cpp
    field_info.cpp
    itl_generator.cpp
    keys_generator.cpp
    langmap_generator.cpp
    language_mapping.cpp
    marshal_generator.cpp
    metaclass_generator.cpp
    sp_language_mapping.cpp
    topic_keys.cpp
    ts_generator.cpp
    typeobject_generator.cpp
    value_reader_generator.cpp
    value_writer_generator.cpp
    visibility_linking.cpp
  }
}

project(opendds_idl_face): opendds_idl_plugin, crosscompile {
  sharedname   = opendds_idl_face
  libout       = $(DDS_ROOT)/lib
  dynamicflags = OPENDDS_IDL_FACE_BUILD_DLL

  Source_Files {
    face_language_mapping.cpp
  }
}

